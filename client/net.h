/**
 * @file net.h 
 */

#ifndef NET_CLIENT_DEF
#define NET_CLIENT_DEF

#include <iostream>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <netdb.h>
#include <string>
#include <unistd.h>
#include <arpa/inet.h>

#include "vec.h"

using namespace std;

/**
 * Print an error message that combines some provded text (prefix) with the
 * standard unix error message that accompanies errno, and then exit the
 * program.  This routine makes it easier to see the logic in our program while
 * still correctly handling errors.
 *
 * @param code   The exit code to return from the program
 * @param err    The error code that was generated by the program
 * @param prefix The text to display before the error message
 */
void error_message_and_exit(std::size_t code, std::size_t err, const char *prefix);

/**
 * @brief Print an error message that combines some application-specific text with 
 * the standard unix error message that accompanies errno.
 * 
 * @param err    The error code that was generated by the program
 * @param prefix The text to display before the error message
 */
void sys_error(int err, const char *prefix);

/**
 * @brief Connect to primary or backup server
 * 
 * @param name The name of the server (ip or DNS) to connect to
 * @param port The server's port that we shoul duse
 * @return     int 
 */
int connect_to_server(string name, size_t port);

/**
 * @brief Send a vector of data over a socket
 * 
 * @param sd The socket on which to send
 * @param msg The message to send
 * @return True if the whole vector was sent, false otherwise 
 */
bool send_reliably(int sd, const vec &msg);

/**
 * @brief Internal method to send a buffer of data over a socket
 * 
 * @param sd The socket on which to send
 * @param bytes A pointer to the first byte of the data to send
 * @param len The number of bytes to send
 * @return True if the whole buffer was sent, false otherwise 
 */
bool reliable_send(int sd, const unsigned char *bytes, int len);

/**
 * @brief Perform a reliable read when we are not sure how many bytes we are going to recieve
 * 
 * @param sd The socket from which to read
 * @return  A vector with the data that was read, or an empty vector on error
 */
vec reliable_get_to_eof(int sd);

#endif